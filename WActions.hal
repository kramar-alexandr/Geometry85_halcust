external inner updating function Integer CreateMailFromOPD(record OPVc,var record MailVc,var string,string,string);remote inner function Integer CreateVATIVFromIP(record IPVc,Integer,var record VATIVVc);remote inner procedure MailVc_PasteAddrCode(var record MailVc,Integer);external inner procedure CalcSum(val,val,val,val,var val,Integer);external inner function Integer TestVATVICorrectionAllowed(record VIVc);remote inner updating  function Integer UpdateTRVATVI(record VIVc,var record VATVIVc,Integer);remote inner updating function Integer UpdateTRVATIV(record IVVc,var record VATIVVc,Integer);external inner function Integer TestVATIVCorrectionAllowed(record IVVc);external procedure CreateManyXMLFiles(date,date);external inner procedure VATVICalcVals(var record VATVIVc);external  inner procedure VATVISumup(var record VATVIVc);external  inner procedure CreateVATIVFromVI(var record VIVc,var record VATIVVc);// Edit ************************** Wednesday, 31 July 2013 09:56:32external  inner procedure VATIVSumup(var record VATIVVc);remote procedure RemoteKBExport(record RcVc);//external procedure RemoteKBExport(record RcVc);external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);external function Boolean  AllowCurChange(string,Boolean);external inner function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);external inner function Boolean  AllowCurChange(string,Boolean);remote inner updating function LongInt RecordAction_raPasteOPInFEVI(var record FEVIVc,LongInt,Integer);external inner function Boolean GetNextCustNr(var string);remote inner updating procedure UpdBalSMSRemote(boolean);// Edit ************************** Monday, 13 February 2017 15:20:58external inner function string 255 StrReplace(string,string,string);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 28 November 2017 17:27:02remote inner updating function boolean EasySendTurboSMStoUser(string,string,var string);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 28 November 2017 17:27:01remote procedure CountSBProd(var array string,var integer);// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 23 August 2018 17:21:55external inner procedure PasteFromSysList(Integer,Integer);// Edit ************************** Wednesday, 26 June 2013 17:23:07remote inner procedure VEBankAccSClassArrayOnOpen(string,var Array string,var Integer);// Edit ************************** BPI Ukraine - KramarAlexandr - Friday, 4 October 2019 14:32:54external inner function Integer VITestApprovalStatus(record VIVc);  //  by IraSetLangMode(LangUkrainian,"UKR",0);globalfunction Boolean VIDClassPrelBookButtonAction(Integer wn,Integer value)BEGIN  Boolean res;  record VIVc VIr;  Integer err;   res = true;  if (WindowState(wn)==Rs_normal) then begin    GetWindowRecord(wn,VIr);    err = VITestApprovalStatus(VIr);    if (err!=0) then begin      MessageBox(err,"");      res = false;    end;    if (VIr.OKFlag!=0) then begin      res = false;    end;    if (VIr.PrelBook!=0) then begin     // res = false;  // by Ira    end;  end;    if (WindowState(wn)==Rs_update) then begin    GetPrevWindowRecord(wn,VIr);    err = VITestApprovalStatus(VIr);    if (err!=0) then begin			MessageBox(0,"");      MessageBox(err,"");      res = false;    end;    if (VIr.OKFlag!=0) then begin      res = false;    end;    if (VIr.PrelBook!=0) then begin      //res = false;  //  by Ira    end;  end;    VIDClassPrelBookButtonAction = res;  RETURN;END;globalupdating function Boolean NewContactCUDsmRemote(record CUVc CUr,var record CUVc ContactCUr)BEGIN  record CUVc lCUr;  record ContactRelVc ContactRelr;  Integer wn,nwn;  string 200 tstr;  Boolean res;/*  */  if (blank(CUr.Code)) then begin    goto LNewContactCUDsmRemote;  end;  RecordNew(ContactCUr);  RecordNew(ContactRelr);  if (GetNextCustNr(tstr)) then begin  end;  ContactCUr.CustCat = "";  ContactCUr.Code = tstr;  ContactCUr.Name = USetStr(2294);  ContactCUr.InvAddr0 = CUr.InvAddr0;  ContactCUr.InvAddr1 = CUr.InvAddr1;  ContactCUr.InvAddr2 = CUr.InvAddr2;  ContactCUr.InvAddr3 = CUr.InvAddr3;  ContactCUr.InvAddr4 = CUr.InvAddr4;  ContactCUr.Phone = CUr.Phone;  ContactCUr.Fax = CUr.Fax;  ContactCUr.Department = CUr.Department;  ContactCUr.CUType = 0;  ContactCUr.VEType = 0;  ContactCUr.GuestType = 0;  ContactCUr.CustType = 1;  // зачем то удалена работа с регистром ContactRelr//===  ContactCUr.ContactCode=CUr.Code;//===//==  res=true;//===LNewContactCUDsmRemote:;  NewContactCUDsmRemote = res;  RETURN;END;global // непонятно зачем убраны две строки обновления updating procedure NewContactCUDsm()BEGIN  record CUVc CUr;  record CUVc ContactCUr;  record ContactRelVc ContactRelr;  Integer wn,nwn;  string 200 tstr;    wn = CurWindow;  GetWindowRecord(wn,CUr);  if (NewContactCUDsmRemote(CUr,ContactCUr)) then begin    nwn = OpenWindow("CUDClass",1,0,"","",ContactCUr);      WindowFieldGoto(nwn,ContactCUr,-1,"Name",true);    //UpdateBrowses("CUVc"); // 62    //UpdateBrowses("ContactRelVc"); //62  end;  RETURN;END;// Новая процедураglobal // Закрыть кнопку "новая" для группы доступа BUDG в окне коммерческих предложений SAV 2010_11_22 Gray-8procedure QTDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)begin	record UserVc  USr;	duplOK = true;	newOK = true;	saveOK = true;	restOK = true;	USr.Code = currentuser; // 62	if (readfirstmain(USr,1,true)) then begin end;// 62	if (USr.AccessGroup=="BUDG") then begin// 62		newOK = false;// 62		duplOK = false;	end;// 62  return;end;// Новая процедураglobal // Закрыть кнопку "новая" для группы доступа BUDG в окне списка коммерческих предложений SAV 2010_11_22 Gray-8procedure QTLClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)begin	record UserVc  USr;	duplOK = true;	newOK = true;	saveOK = true;	restOK = true;	USr.Code = currentuser;// 62	if (readfirstmain(USr,1,true)) then begin end;// 62	if (USr.AccessGroup=="BUDG") then begin // 62		newOK = false;// 62		duplOK = false;// 62	end;// 62  return;end;globalfunction Boolean QTLClassOnOpenWindow(Integer wn)begin  record UserVc User;    User.Code = currentuser;  readfirstmain(User,1,true);  if(nonblank(User.SalesGroup))then begin    if(usercanaction("ViewListQTSalesGroup",false)==false)then begin      setwindowsubset(wn,User.SalesGroup);    end;   end;      QTLClassOnOpenWindow = false;  return;end;globalfunction Boolean POLClassOnOpenWindow(Integer wn)begin  record UserVc User;    User.Code = currentuser;  readfirstmain(User,1,true);  if(nonblank(User.SalesGroup))then begin    if(usercanaction("ViewListPOSalesGroup",false)==false)then begin      setwindowsubset(wn,User.SalesGroup);    end;   end;      POLClassOnOpenWindow = false;  return;end;// with innerglobal function Boolean TSDClassOKFlagButtonAction(Integer wn,Integer value)begin  Boolean res;  record TSVc TSr;    // добавлен функционал заполнения поля "продавец" тем, кто океет карточку  res=inner.TSDClassOKFlagButtonAction(wn,value);  if res then begin    DeselectWindow(wn,true);    GetWindowRecord(wn,TSr);    if TSr.OKFlag==0 then begin    TSr.SalesMan=CurrentUser;    end else begin      TSr.SalesMan="";    end;    PutWindowRecord(wn,TSr);  end;  TSDClassOKFlagButtonAction = res;  return;end;// новая процедура, срабатывающая при заполнеии поля UserCodefunction Boolean TSDClassUserCodeEFAfter(Integer wn,Boolean changedf)BEGIN Boolean res;  record TSVc TSr;  record UserVc USr;  row TSVc TSrw;  Integer i;  SetLangMode(LangUkrainian,"UKR",0);    res = true;  if (changedf) then begin  GetWindowRecord(wn,TSr);  USr.Code=TSr.UserCode;    if ReadFirstMain(USr,1,true) then begin    i=0;	  while(i<MatRowCnt(TSr)) begin	  MatRowGet(TSr,i,TSrw);	  TSrw.EMCode=TSr.UserCode;	  MatRowPut(TSr,i,TSrw);	  i=i+1;	  end;	end else begin		if nonblank(TSr.UserCode) then begin		RecordCheckError(10895," ‘пґвробґтника не знайдено в базґ",-1,"UserCode"); 		end;        TSr.UserCode="";        res =false;        i=0;		while(i<MatRowCnt(TSr)) begin		MatRowGet(TSr,i,TSrw);		TSrw.EMCode="";		MatRowPut(TSr,i,TSrw);		i=i+1;		end;	  end;  PutWindowRecord(wn,TSr);  end;  TSDClassUserCodeEFAfter = res;  RETURN;END;// новая процедура, срабатывающая при заполнеии поля Authorityfunction Boolean TSDClassAuthorityEFAfter(Integer wn,Boolean changedf)BEGIN Boolean res;  record TSVc TSr,TS1r;  record UserVc USr;  string 60 authority;  SetLangMode(LangUkrainian,"UKR",0);    res = true;  if (changedf) then begin  GetWindowRecord(wn,TSr);    if (WindowState(wn)==0) or (WindowState(wn)==1) then begin      if nonblank(TSr.Authority) and TSr.Authority!=CurrentUser then begin      TSr.Authority="";      MessageBox(10895,USetStr(31000));      end;    end;      if (WindowState(wn)==2) then begin      GetPrevWindowRecord(wn,TS1r);      authority=TS1r.Authority;      if nonblank(authority) then begin        if authority!=Left(TSr.Authority,len(authority)) then begin        MessageBox(10895,USetStr(31000));        TSr.Authority=authority;        end else begin          if CurrentUser!=Right(TSr.Authority,(len(TSr.Authority)-len(authority)-1)) then begin          MessageBox(10895,USetStr(31000));          TSr.Authority=authority;          end;        end;      end else begin        if TSr.Authority!=CurrentUser then begin        TSr.Authority="";        MessageBox(10895,USetStr(31000));        end;      end;    end;    PutWindowRecord(wn,TSr);  end;    TSDClassAuthorityEFAfter = res;  RETURN;END;global // with inner// добавлены вызовы обработчиков для полей  UserCode Authorityfunction Boolean TSDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)BEGIN  Boolean res,res1;  record TSVc TSr;  row TSVc TSrw;  SetLangMode(LangUkrainian,"UKR",0);    res=inner.TSDClassAfterEditField(wn,fieldname,fn,rownr,changed);  if res==false then begin    if (fieldname=="UserCode") begin    res = TSDClassUserCodeEFAfter(wn,changed);    end;    if (fieldname=="Authority") begin    res = TSDClassAuthorityEFAfter(wn,changed);    end;  end;   	//Edit Start ---------------------------------------------- Edit Start	//Friday, 20 March 2015 17:18:50	if(changed>0)then begin		if(rownr>-1)then begin			if(fieldname=="Qty" or fieldname=="PRCode")then begin				getwindowrecord(wn,TSr);				matrowget(TSr,rownr,TSrw);				TSrw.ArtCode = "GENERAL";				matrowPUt(TSr,rownr,TSrw);				Putwindowrecord(wn,TSr);				res1 = inner.TSDClassAfterEditField(wn,"ArtCode",fn,rownr,1);			end;		end;  end;  	// Edit End ---------------------------------------------- Edit End	  TSDClassAfterEditField = res;  RETURN;END;globalfunction Boolean OPDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)BEGIN  Boolean res,testf,whtaxcalculatedf;  record OPVc OPr;  record OPVc OP2r;  row OPVc OPrw;  Integer i,rwcnt;  record CYBlock CYb;  Integer nwn;    res = true;    res = inner.OPDClassActiveEditField(wn,fieldname,fn,wnst,rownr,changed);    if(fieldname=="BankAcc")then begin		if(usercanaction("AllowEditBancAcc",true)==false)then begin			res = false;			end;  end;  getwindowrecord(wn,OPr);  if(OPr.DoneFlag==0)then begin  	if(fieldname=="PrepayNr")then begin  		res = true;  	end;  end;  OPDClassActiveEditField = res;  RETURN;END;global // witg innerfunction Boolean VIDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)BEGIN  Boolean res,umf;  res=inner.VIDClassActiveEditField(wn,fieldname,fn,wnst,rownr,changed);    // 6.2s допуск к изменению поля OKPersons только для двух сотрудников  if fieldname=="OKPersons" then begin    if CurrentUser=="JFA" or CurrentUser=="FD" then begin		res=true;    end else begin      res=true;    end;  end;  if(fieldname=="DocumentsFlag")then begin  	res = true;  end;// 6.2e  VIDClassActiveEditField = res;  RETURN;END;// новая процедураfunction Boolean QTDClassAuthorityEFAfter(Integer wn,Boolean changedf)BEGIN Boolean res;  record QTVc QTr;  SetLangMode(LangUkrainian,"UKR",0);    res = true;  if (changedf) then begin  GetWindowRecord(wn,QTr);    if nonblank(QTr.Authority) and QTr.Authority!=CurrentUser then begin    QTr.Authority="";    MessageBox(10895,USetStr(31000));    end;  PutWindowRecord(wn,QTr);  end;    QTDClassAuthorityEFAfter = res;  RETURN;END;global // with innerfunction Boolean QTDClassRejectedButtonAction(Integer wn,Integer value)begin  Boolean res;  record QTVc QTr;  res=inner.QTDClassRejectedButtonAction(wn,value);  if res then begin    DeselectWindow(wn,true);    GetWindowRecord(wn,QTr);    if (UserCanAction("ChangeStatusQT",true))==false then begin    res=false;    end;  end;  QTDClassRejectedButtonAction = res;  return;end;global // with innerfunction Boolean QTDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)BEGIN  Boolean res;  record QTVc QTr;  SetLangMode(LangUkrainian,"UKR",0);  // добавлен обработчик для поля Authority  res=inner.QTDClassAfterEditField(wn,fieldname,fn,rownr,changed);  if res==false then begin    if (fieldname=="Authority") begin    res = QTDClassAuthorityEFAfter(wn,changed);    end;  end;    //case "Spec": res = FEIVDClassSpecEFAfter(wn,rownr,changed);  QTDClassAfterEditField = res;  RETURN;END;//===========// расширен функционал процедуры IPDClassInvoiceNrEFAfter// - заполняется столбец код проекта// новая процедура, with innerfunction Boolean sav_IPDClassInvoiceNrEFAfter(Integer wn, Integer rownr,Integer changed,Integer fn)BEGIN  Boolean res,testf,installmentf;  record IPVc IPr;  row IPVc IPrw;  record IVVc IVr;  res = true;  if (changed!=0) then begin    GetWindowRecord(wn,IPr);    if (rownr>-1) then begin      MatRowGet(IPr,rownr,IPrw);      switch (IPrw.stp) begin        case 1:          IVr.SerNr = IPRw.InvoiceNr;			if (readfirstmain(IVr,1,true)) then begin				IPRw.PRCode = IVr.PRCode;				MatRowPut(IPr,rownr,IPrw);				PutWindowRecord(wn,IPr); 			end;      end;    end;  end;  sav_IPDClassInvoiceNrEFAfter = res;  RETURN;END;// расширен функционал процедуры IPDClassOrderNrEFAfter// - заполняется столбец код проекта// новая процедура, with innerfunction Boolean sav_IPDClassOrderNrEFAfter(Integer wn,Integer rownr,Boolean changedf)BEGIN  Boolean res;  record IPVc IPr;  row IPVc IPrw;  val chk;  record ORVc ORr;  res = true;  if (changedf) then begin   GetWindowRecord(wn,IPr);   if (rownr>-1) then begin		MatRowGet(IPr,rownr,IPrw);		switch (IPrw.stp) begin			case 1: 				ORr.SerNr = IPRw.OrderNr;				if (readfirstmain(ORr,1,true)) then begin					IPRw.PRCode = ORr.PRCode;					MatRowPut(IPr,rownr,IPrw);					PutWindowRecord(wn,IPr); 				end;			end;		end;  end;  sav_IPDClassOrderNrEFAfter = res;  RETURN;END;// добавление заполнение столбца проекта в случае заплнения полей InvoiceNr OrderNrglobal// with innerfunction Boolean IPDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)BEGIN  Boolean res;  res = inner.IPDClassAfterEditField( wn,fieldname,fn,rownr,changed);  switch (fieldname) begin    case "InvoiceNr": res = sav_IPDClassInvoiceNrEFAfter(wn,rownr,changed,fn);    case "OrderNr": res = sav_IPDClassOrderNrEFAfter(wn,rownr,changed!=0);  end;  IPDClassAfterEditField = res;  RETURN;END;// добаление проверки Џроекти передплати та акту не спґвпадають// новая процедура, with innerfunction Boolean sav_IVDClassCUPNrEFAfter(Integer wn,Integer rownr,Integer changed)begin    record IVVc IVr;  row IVVc IVrw;  record ARPayVc ARPr;  if (changed!=0) and (rownr>=0) then begin      DeselectWindow(wn,false);    GetWindowRecord(wn,IVr);    matrowget (IVr,rownr,IVrw);	 ARPr.CUPNr = IVrw.CUPNr;	 if (readfirstmain(ARPr,1,true)) then begin		if ARPr.PRCode <> IVr.PRCode and (nonblank(IVr.PRCode)) and (nonblank(ARPr.PRCode)) then begin			MessageBox(31001,"");		end;	 end;  end;    sav_IVDClassCUPNrEFAfter = true;  return;end;global// with inner// активация проверки "Џроекти передплати та акту не спґвпадають" при заплнении поля  CUPNrfunction Boolean IVDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)BEGIN  Boolean res;  res = inner.IVDClassAfterEditField(wn,fieldname,fn,rownr,changed);  switch (fieldname) begin    case "CUPNr": res = sav_IVDClassCUPNrEFAfter(wn,rownr,changed);  end;  IVDClassAfterEditField = res;  RETURN;END;//Проверка на авторизацию комм.предложения перед печатью.// новая процедура, with inner/*global procedure DoQTForm(record RcVc RepSpec,record QTVc QTr) // SAV 6006 2010_09_03BEGIN   	if (nonblank(QTr.Authority)) then begin		inner.DoQTForm(RepSpec,QTr);// Edit ************************** Monday, 8 October 2012 17:06:41	end else begin		MessageBox(31004,"");	end;  RETURN;END;*///Проверка на авторизацию комм.предложения перед созданием бюджета.// новая процедура, with innerglobal updating procedure CreateTBBUFromQTDsm()begin  Integer wn,nwn,err;  record QTVc QTr;  wn = CurWindow;  GetWindowRecord(wn,QTr);    	if (QTr.Rejected==2) then begin		inner.CreateTBBUFromQTDsm;	end else begin		MessageBox(31003,"");	end;  RETURN;END;// with innerglobal function Boolean QTDClassDeleteRowTest(Integer wn,Integer rownr)begin  record QTVc QTr;  row QTVc QTrw;  Boolean res;  res = true;  if (nonblank(QTr.Authority)) then begin  res = false; end; //SAV GRAY-9 2010_11_30  if (QTr.Rejected==2) then begin  res = false; end; //SAV GRAY-9 2010_11_30  if res then begin	res = inner.QTDClassDeleteRowTest(wn,rownr);  end;  QTDClassDeleteRowTest = res;  return;end;global // новая самописная процедураprocedure SumUpFEVIVcM(record FEVIVc FEVIr, var val sum, var val vatsum, var val advsum)BEGIN  row FEVIVc FEVIrw;  Integer rwcnt,i,vatrwcnt,j;  record VATCodeBlock VATr;  row VATCodeBlock VATrw;    BlockLoad(VATr);  rwcnt=MatRowCnt(FEVIr);  sum=0;  vatsum=0;  advsum=0;  for (i=0; i<rwcnt; i=i+1) begin  MatRowGet(FEVIr,i,FEVIrw);  sum=sum+FEVIrw.Sum;    if nonblank(FEVIrw.VATCode) then begin    vatrwcnt=MatRowCnt(VATr);      for (j=0; j<vatrwcnt; j=j+1) begin      MatRowGet(VATr,j,VATrw);        if VATrw.VATCode==FEVIrw.VATCode then begin		vatsum=vatsum+(FEVIrw.Sum*VATrw.ExVatpr/100);		advsum=advsum+(FEVIrw.Sum*VATrw.Tax1pr/100);		goto FoundSums;		end;      end;    end;  FoundSums:;  end;      RETURN;END;global // убрана проверка на номер счетаupdating procedure FirstEventOPDsm()BEGIN  record FEVIVc FEVIr;  record OPVc OPr;  row OPVc OPrw;  Integer wn,nwn,rownr;  LongInt r;  wn = CurWindow;  if (WindowState(wn)==0) then begin//Rs_normal    rownr = WindowActiveRow(wn);    if (rownr>=0) then begin      GetWindowRecord(wn,OPr);      if (OPr.OrderedFlag!=0) and (OPr.DoneFlag!=0) then begin        DeselectWindow(wn,false);        MatRowGet(OPr,rownr,OPrw);            if ((nonblank(OPrw.VECode)) and (OPrw.BankVal!=0) and (OPrw.PrepayNr!=-1)) then begin // 62          r = RecordAction_raPasteOPInFEVI(FEVIr,OPr.SerNr,rownr);          if (r==0) then begin            nwn = OpenWindow("FEVIDClass",1,0,"","",FEVIr);          end else begin            Beep;          end;        end;      end;    end;  end;  RETURN;END;global // with innerfunction Boolean QTDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)BEGIN  Boolean res;  record QTVc QTr;  row QTVc QTrw;  record INVc INr;    	res = true;	GetWindowRecord(wn,QTr); // 62s	if nonblank(QTr.Authority) then begin		if (UserCanAction("ChangeStatusQT",true))==false then begin			res = false;			goto LQTDClassActiveEditField;		end else begin			switch (fieldname) begin				case "Authority": 				case "Comment": 				case "AcceptanceStatus": // Edit ************************** Friday, 26 October 2012 12:52:22				otherwise					res = false;					goto LQTDClassActiveEditField;			end;		end;	end else begin		if (UserCanAction("ChangeStatusQT",true))==false then begin			if  fieldname=="Authority" then begin				res = false;			end;		end;	end; // 62e	if res and fieldname!="AcceptanceStatus" then begin		res = inner.QTDClassActiveEditField(wn,fieldname,fn,wnst,rownr,changed);	end;  LQTDClassActiveEditField:;    QTDClassActiveEditField = res;  RETURN;END;global // новая процедураfunction Boolean PRTSSClassOnOpenWindow(Integer wn)begin  Integer mwn,wn2;  Integer cnt,i;  record PRVc PRr;  record TSVc TSr;  record QTVc QTr;  record ActVc Actr;   // wn=CurWindow;  mwn = MotherWindow(wn);  GetWindowRecord(wn,PRr);  CloseWindow(wn);  if GetWindowFileName(mwn)=="TSVc" then begin	GetWindowRecord(mwn,TSr);	wn2=OpenWindow("PRSClass",0,mwn,TSr.Stage,"ActPRStage",PRr);   end;    if GetWindowFileName(mwn)=="QTVc" then begin  GetWindowRecord(mwn,QTr);  wn2=OpenWindow("PRSClass",0,mwn,QTr.Stage,"ActPRStage",PRr);  end;    if GetWindowFileName(mwn)=="ActVc" then begin  GetWindowRecord(mwn,Actr);  Actr.Stage=1;  wn2=OpenWindow("PRSClass",0,mwn,Actr.Stage,"ActPRStage",PRr);  end;    PRTSSClassOnOpenWindow=true;  return;end;global // новая процедураfunction Boolean INTSSClassOnOpenWindow(Integer wn)begin  Integer mwn,wn2;  Integer cnt,i,rownr;  record INVc INr;  record TSVc TSr;  row TSVc TSrw;   // wn=CurWindow;  mwn = MotherWindow(wn);  GetWindowRecord(wn,INr);  CloseWindow(wn);  GetWindowRecord(mwn,TSr);  rownr=WindowActiveRow(mwn);  MatRowGet(TSr,rownr,TSrw);  TSrw.ArtCode="TS";    wn2=OpenWindow("INSClass",0,mwn,TSrw.ArtCode,"ActCodeTS",INr);   INTSSClassOnOpenWindow=true;  return;end;global // Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 17 May 2018 13:53:34function Boolean VATIVPNSClassOnOpenWindow(Integer wn)begin	record VATIVVc VATIVr,oldVATIVr;  integer mwn;  date sd;  boolean TrHs;  integer lastnum; 	 	mwn = motherwindow(wn);  getwindowrecord(mwn,VATIVr);  if(nonblankdate(VATIVr.TransDate))then begin  	sd = VATIVr.TransDate;  end else begin  	sd = currentdate;  end;  oldVATIVr.TransDate = "01/" & getmonth(sd) & "/" & GetYear(sd);  TrHs = true;	while (loopkey("TransDate",oldVATIVr,1,TrHs)) begin		if (getmonth(oldVATIVr.TransDate)<>getmonth(sd)) then begin TrHs = false; end;			if lastnum < oldVATIVr.VEPN then begin lastnum = oldVATIVr.VEPN; end;	end;  SetListString(wn,len(lastnum+1),lastnum+1,false);   VATIVPNSClassOnOpenWindow = false;  return;end;global // Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 17 May 2018 13:53:34function Boolean VATIVPNSClassOnOKWindow(Integer wn)begin	integer mwn;		mwn = MotherWindow(wn);	  PasteString(mwn,GetListString(wn,SelectedListLine(wn)));	CloseWindow(wn);	  VATIVPNSClassOnOKWindow = false;  return;end;global // Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 23 August 2018 17:18:23function Boolean PR_SBSClassOnOpenWindow(Integer wn)begin	record PRVc PRr;  integer mwn,acnt,i;  date sd;  boolean TrHs;  integer lastnum;  array string 255  astr; 	    CountSBProd(astr,acnt);  for (i=0;i<acnt;i=i+1) begin    SetListString(wn,len(astr[i]),astr[i],false);      end;  PR_SBSClassOnOpenWindow = false;  return;end;global // Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 17 May 2018 13:53:34function Boolean PR_SBSClassOnOKWindow(Integer wn)begin	Integer mwn,i;  string 60 tstr;  boolean trhs;		mwn = MotherWindow(wn);  if (SelectedListLine(wn)>=0) then begin      tstr = GetListString(wn,SelectedListLine(wn));      tstr = left(tstr,40);		trhs = true;		while trhs begin			if (mid(tstr,i,1)<>" ") then begin 				i=i+1;			end else begin				tstr = left(tstr,i);trhs = false;			end;			if (i>len(tstr)) then begin trhs = false; end;		end;        end else begin       tstr="";  end;    CloseWindow(wn);  PasteString(mwn,tstr);	  PR_SBSClassOnOKWindow = false;  return;end;// Новая процедураglobal // Закрыть кнопку "новая" для группы доступа BUDG в окне коммерческих предложений  // sav 2011_08_04 procedure TBBUDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)begin	record UserVc  USr;	duplOK = true;	newOK = true;	saveOK = true;	restOK = true;	USr.Code = currentuser; // 62	if (readfirstmain(USr,1,true)) then begin end;// 62	if (USr.AccessGroup=="BUDG") then begin// 62		newOK = false;// 62		duplOK = false; // sav 2011_08_04 	end;// 62  return;end;global // Закрыть кнопку "новая" для группы доступа BUDG в окне коммерческих предложений  // sav 2011_08_04 procedure TBBULClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)begin	record UserVc  USr;	duplOK = true;	newOK = true;	saveOK = true;	restOK = true;	USr.Code = currentuser; // 62	if (readfirstmain(USr,1,true)) then begin end;// 62	if (USr.AccessGroup=="BUDG") then begin// 62		newOK = false;// 62		duplOK = false; // sav 2011_08_04 	end;// 62  return;end; // sav expat 2011_08_04function Boolean TSCanDeleteRow(record TSVc TSp,Integer rownr,row TSVc TSrwp)begin  Boolean res;  record TBIVVc TBIVr;    res = true;  TBIVr.PRCode = TSrwp.PRCode;  //TBIVr.oVc = 1;  TBIVr.SerNr = TSp.SerNr;  TBIVr.Row = rownr;  if (ReadFirstMain(TBIVr,4,true)) then begin    if (TBIVr.Invoice!=-1) then begin res = false; end;  end;  TSCanDeleteRow = res;  return;end;global function Boolean TSDClassOverStrikeTest(Integer wn,Integer rownr)begin  record TSVc TSr;  row TSVc TSrw;  row TSVc TS2rw;  Boolean res;  Integer updatemode;  Integer rwcnt,orwcnt;    record UserVc USr;    USr.Code = currentuser;   if (readfirstmain(USr,1,true)) then begin end;   res = true;   if USr.AccessGroup<>"MAIN" then begin		  if (rownr<0) then begin		    goto LTSDClassOverStrikeTest;		  end;		  GetWindowRecord(wn,TSr);		  updatemode = 2;//Rs_update		  res = false;		  orwcnt = WindowOldRowcnt(wn);		  rwcnt = MatRowCnt(TSr);		  MatRowGet(TSr,rownr,TSrw);		  if (TSCanDeleteRow(TSr,rownr,TSrw)==false) then begin		    MessageBox(1092,"");		    goto LTSDClassOverStrikeTest;		  end;		  if (orwcnt<rwcnt) then begin		    MatRowGet(TSr,orwcnt,TS2rw);		  end;		  if (WindowState(wn)!=updatemode) then begin		    MessageBox(1050,"");		    goto LTSDClassOverStrikeTest;		  end;		  if (orwcnt==rwcnt) then begin		    MessageBox(1050,"");		    goto LTSDClassOverStrikeTest;		  end;		  if (TS2rw.stp!=2) then begin		    MessageBox(1050,"");		    goto LTSDClassOverStrikeTest;		  end;		  if (TSrw.stp!=1) then begin		    MessageBox(1051,"");		    goto LTSDClassOverStrikeTest;		  end;		  if (rownr<orwcnt) then begin res = true; end;  LTSDClassOverStrikeTest:;end;  TSDClassOverStrikeTest = res;  RETURN;END;global function Boolean TSDClassDeleteRowTest(Integer wn,Integer rownr)begin  record TSVc TSr;  Boolean res;  Integer updatemode;	record UserVc USr;  res = true;  updatemode = 2;//Rs_update  if (WindowState(wn)==updatemode) then begin    GetPrevWindowRecord(wn,TSr);    if (TSr.OKFlag!=0) then begin res = false; end;  end;  usr.Code = CurrentUser;  if readfirstmain(USr,1,true) then begin end;	if USr.AccessGroup=="ADM" then begin		res =true;	end;  TSDClassDeleteRowTest = res;    return;end;globalfunction Boolean TSDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)BEGIN  Boolean res,umf;  record TSVc TSr;  record TSVc TS2r;  row TSVc TSrw;  Integer normalmode,updatemode;  Integer rwcnt,orwcnt;  record UserVc USr;   res = true;   USr.Code = currentuser;   if (readfirstmain(USr,1,true)) then begin end;  normalmode = 0;//Rs_normal  updatemode = 2;//Rs_update    if (WindowState(wn)==updatemode) then begin    res = false;    GetWindowRecord(wn,TSr);    GetPrevWindowRecord(wn,TS2r);    if (TS2r.OKFlag==0) or USr.AccessGroup=="ADM" then begin //  	      res = true;      goto LTSDClassActiveEditField;    end;    if (rownr==-1) then begin      if (changed!=0) then begin        switch (fieldname) begin          case "Comment": ;          otherwise            res = false;            MessageBox(1512,"");        end;      end;      goto LTSDClassActiveEditField;          end;    umf = false;    orwcnt = WindowOldRowcnt(wn);      rwcnt = MatRowCnt(TSr);    if (orwcnt<rwcnt) then begin      MatRowGet(TSr,orwcnt,TSrw);      if (TSrw.stp==2) then begin umf = true; end;    end;    if (umf) then begin res = true; end;    if ((rownr!=-1)) then begin      if (rownr<orwcnt) then begin        if (true) then begin          if (changed!=0) then begin             res = false;             MessageBox(1512,"");             goto LTSDClassActiveEditField;          end;           end;      end else begin        if (umf==false) then begin          if (changed!=0) then begin             MessageBox(1050,"");          end;          goto LTSDClassActiveEditField;        end;      end;    end;  end;LTSDClassActiveEditField:;    TSDClassActiveEditField = res;  RETURN;END;global procedure KBExportSm()begin	record RcVc RepSpec;	integer wn;		wn = curwindow;	DeselectWindow(wn,false);	GetWindowRecord(wn,RepSpec);	CloseWindow(wn);	RemoteKBExport(RepSpec);return;end;global  // SAV Gray-5 2011_01_03function Boolean ContractsDClassCustCodeEFAfter(Integer wn,Boolean changedf)begin	record ContractsVc CTr;	record CUVc CUr;	Boolean res;	integer i;  if (changedf) then begin		GetWindowRecord(wn,CTr);		DeselectWindow(wn,false);		CUr.Code = CTr.CustCode;		if (readfirstmain(CUr,1,true)) then begin			CTr.SearchKey = CUr.Name;			//CTr.PayDeal = CUr.PayDeal;			PutWindowRecord(wn,CTr);		end; 	end;  ContractsDClassCustCodeEFAfter = true;  return;end;global // SAV Gray-5 2011_01_03function Boolean ContractsDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)BEGIN  Boolean res;	switch (fieldname) begin		case "CustCode": res	= ContractsDClassCustCodeEFAfter(wn,changed!=0); 	end;  ContractsDClassAfterEditField = res;  RETURN;END;global // SAV Gray-5 2011_01_03function Boolean ContractsDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)begin  Boolean res;  record ContractsVc CTr;		res = true;	GetWindowRecord(wn,CTr);    	if (CTr.OKFlag==1) then begin			switch (fieldname) begin			case "Code":res = false;			case "TransDate":res = false;			case "CustCode":res = false;			case "SearchKey":res = false;			case "PayDeal":res = false;			case "Type":res = false;		end;	end;	ContractsDClassActiveEditField = res;  return;end; global // SAV Gray-5 2011_01_03procedure ContractsSClassArrayOnOpen(var Array string astr,var Integer acnt, string CuCode)begin  record ContractsVc CTr;  Integer i,rwcnt;  boolean trhs;  	trhs = true;	CTr.CustCode = CuCode;	while (loopkey("ActCustCode",CTr,1,trhs)) begin		if CTr.CustCode==CuCode then begin			if CTr.OKFlag==1 then begin				astr[acnt] = CTr.Code & "      " &  CTr.TransDate;				acnt = acnt + 1;			end;		end else begin			trhs = false;		end;	end;  return;end;globalfunction Boolean ContractsSClassOnOpenWindow(Integer wn) // SAV Gray-5 2011_01_03begin  Array string 255 astr;  Integer i,acnt;  record VATIVVc VATIVr;    GetWindowRecord(MotherWindow(wn),VATIVr);    ContractsSClassArrayOnOpen(astr,acnt,VATIVr.CustCode);  for (i=0;i<acnt;i=i+1) begin    SetListString(wn,len(astr[i]),astr[i],false);      end;  ContractsSClassOnOpenWindow = false;  return;end;globalfunction Boolean ContractsSClassOnOKWindow(Integer wn) // SAV Gray-5 2011_01_03begin  Integer mwn,i;  string 60 tstr;  boolean trhs;      mwn = MotherWindow(wn);  if (SelectedListLine(wn)>=0) then begin      tstr = GetListString(wn,SelectedListLine(wn));      tstr = left(tstr,10);		trhs = true;		while trhs begin			if (mid(tstr,i,1)<>" ") then begin 				i=i+1;			end else begin				tstr = left(tstr,i);trhs = false;			end;			if (i>len(tstr)) then begin trhs = false; end;		end;        end else begin       tstr="";  end;    CloseWindow(wn);  PasteString(mwn,tstr);  ContractsSClassOnOKWindow = false;  return;end;globalfunction Boolean VATVIDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)BEGIN  Boolean res;    res=inner.VATVIDClassActiveEditField(wn,fieldname, fn, wnst, rownr, changed);	res = true;  VATVIDClassActiveEditField = res;  return;end;function Boolean sav_VATVIDClassVECodeEFAfter(Integer wn,Integer changed)begin  Boolean res;  record VATVIVc VATVIr;  record CUVc CUr;      GetWindowRecord(wn,VATVIr);	CUr.Code = VATVIr.VECode;	if (ReadFirstMain(CUr,1,true)) then begin end;	VATVIr.VEName = CUr.Name;	VATVIr.Objects = CUr.VEObjects;	PutWindowRecord(wn,VATVIr);  sav_VATVIDClassVECodeEFAfter = res;  return;end;function Boolean sav_VATVIDClassSumEFAfter(Integer wn,Integer changed)begin  Boolean res;  record VATVIVc VATVIr;   GetWindowRecord(wn,VATVIr);    VATVICalcVals(VATVIr);  VATVISumup(VATVIr);    PutWindowRecord(wn,VATVIr);  sav_VATVIDClassSumEFAfter = res;  return;end;globalfunction Boolean VATVIDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)BEGIN  Boolean res;  res = inner.VATVIDClassAfterEditField(wn,fieldname,fn, rownr,changed);  switch (fieldname) begin    case "VECode": res = sav_VATVIDClassVECodeEFAfter(wn,changed);    case "Sum": res = sav_VATVIDClassSumEFAfter(wn,changed);    case "qty": res = sav_VATVIDClassSumEFAfter(wn,changed);    case "VATCode": res = sav_VATVIDClassSumEFAfter(wn,changed);    case "Price": res = sav_VATVIDClassSumEFAfter(wn,changed);    case "vRebate": res = sav_VATVIDClassSumEFAfter(wn,changed);  end;  VATVIDClassAfterEditField = res;  RETURN;END;//xxxxxxxxxxxxxxxxxxxxfunction Boolean sav_VATIVDClassCustCodeEFAfter(Integer wn,Integer changed)begin  Boolean res;  record VATIVVc VATIVr;  record CUVc CUr;      GetWindowRecord(wn,VATIVr);	CUr.Code = VATIVr.CustCode;	if (ReadFirstMain(CUr,1,true)) then begin end;	VATIVr.Addr0 = CUr.Name;	PutWindowRecord(wn,VATIVr);  sav_VATIVDClassCustCodeEFAfter = res;  return;end;function Boolean sav_VATIVDClassQuantEFAfter(Integer wn,Integer rownr,Integer changed)begin  Boolean res;  record VATIVVc VATIVr;  row VATIVVc VATIVrw;  val t;  Boolean chsum;  record GeneralOptionBlock GenOptRec;  if (changed!=0) then begin    BlockLoad(GenOptRec);    GetWindowRecord(wn,VATIVr);    if (rownr>-1) then begin      MatRowGet(VATIVr,rownr,VATIVrw);      CalcSum(VATIVrw.Quant,VATIVrw.Price,VATIVrw.PriceFactor,VATIVrw.vRebate,t,GenOptRec.UseDiscount);      VATIVrw.Sum = t;      MatRowPut(VATIVr,rownr,VATIVrw);		chsum = true;    end;	 if chsum then begin VATIVSumup(VATIVr); end;	PutWindowRecord(wn,VATIVr);      end;     sav_VATIVDClassQuantEFAfter = res;  return;end;function Boolean sav_VATIVDClassSumEFAfter(Integer wn,Integer rownr,Integer changed)begin  Boolean res;  record VATIVVc VATIVr;	if (changed!=0) then begin		GetWindowRecord(wn,VATIVr);		VATIVSumup(VATIVr); 		PutWindowRecord(wn,VATIVr);    	end;     sav_VATIVDClassSumEFAfter = res;  return;end;function Boolean sav_VATIVDClassContractEFAfter(Integer wn,Integer changed)begin  Boolean res;  record VATIVVc VATIVr;  record ContractsVc CTr;	GetWindowRecord(wn,VATIVr);	DeselectWindow(wn,false);		CTr.Code = VATIVr.Contract;		CTr.CustCode = VATIVr.CustCode;				if (ReadFirstKey("CodeCustCode",CTr,2,true)) then begin			VATIVr.ContractDate=CTr.TransDate;			VATIVr.ContractType=CTr.Type;			VATIVr.ContractPayDeal=CTr.PayDeal;		end;   	PutWindowRecord(wn,VATIVr);  sav_VATIVDClassContractEFAfter = res;  return;end;globalfunction Boolean VATIVDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)BEGIN  Boolean res;  res = inner.VATIVDClassAfterEditField(wn,fieldname,fn, rownr,changed);  switch (fieldname) begin    case "CustCode": res = sav_VATIVDClassCustCodeEFAfter(wn,changed);	 case "Sum": res = sav_VATIVDClassSumEFAfter(wn,rownr,changed);    case "Quant": res = sav_VATIVDClassQuantEFAfter(wn,rownr,changed);    case "VATCode": res = sav_VATIVDClassQuantEFAfter(wn,rownr,changed);    case "Price": res = sav_VATIVDClassQuantEFAfter(wn,rownr,changed);    case "Contract": res = sav_VATIVDClassContractEFAfter(wn,changed);    case "CurncyCode": res = sav_VATIVDClassSumEFAfter(wn,rownr,changed);    case "ToRateB1": res = sav_VATIVDClassSumEFAfter(wn,rownr,changed);    case "FrRate": res = sav_VATIVDClassSumEFAfter(wn,rownr,changed);    case "ToRateB2": res = sav_VATIVDClassSumEFAfter(wn,rownr,changed);  end;  VATIVDClassAfterEditField = res;  RETURN;END;global procedure ExportVATIVXMLSm()begin	integer wn;	record ExportVATIVXMLBlock XMLb;	record RcVc RepSpec;	wn = curwindow;	DeselectWindow(wn,true);	GetWindowRecord(wn,XMLb);	if XMLb.SerNr<>-1 then begin		RepSpec.long1 = XMLb.SerNr;		RepSpec.repname = "ExportXMLEn";		RepSpec.Media = mtFile;		RunExport(RepSpec,true);	end else begin		if nonblank(XMLb.Sdate) and nonblank(XMLb.Sdate) then begin			CreateManyXMLFiles(XMLb.Sdate,XMLb.Edate);				end;	end;return;end;global procedure ExportXMLsm()// SAV  экспорт в XMLbegin	integer wn;	record VATIVVc VIr;	record RcVc RepSpec;		wn = curwindow;	DeselectWindow(wn,true);	GetWindowRecord(wn,VIr);	RepSpec.long1 = VIr.SerNr;	RepSpec.repname = "ExportXMLEn";	RepSpec.Media = mtFile;	RunExport(RepSpec,true);return;end;globalupdating procedure VATCorrectionIVsm()begin  record IVVc IVr;  record VATIVVc VATIVr;  Integer wn,nwn;  Integer normalstate;  Integer err;  record ContractsVc CTr;  boolean trhs;  normalstate = 0;  wn = CurWindow;  if (WindowState(wn)==normalstate) then begin    GetWindowRecord(wn,IVr);    if (IVr.OKFlag==0) then begin      MessageBox(2072,"");      goto LVATCorrectionIVsm;    end;    if (IVr.Invalid!=0) then begin      MessageBox(1282,"");      goto LVATCorrectionIVsm;    end;    if (IVr.ARonTR==0) then begin      MessageBox(20938,"");      goto LVATCorrectionIVsm;    end;    err = TestVATIVCorrectionAllowed(IVr);    if (err!=0) then begin      MessageBox(err,"");      goto LVATCorrectionIVsm;    end;    err = UpdateTRVATIV(IVr,VATIVr,0);    if (err==0) then begin      if (MatRowCnt(VATIVr)>0) then begin			// SAV Gray-5 2011_01_03			trhs = true;			CTr.CustCode = VATIVr.CustCode;			while (loopkey("ActCustCode",CTr,1,trhs)) begin				if CTr.OKFlag==1 and CTr.CustCode == VATIVr.CustCode then begin					VATIVr.Contract = CTr.Code;					VATIVr.ContractDate =CTr.TransDate;					VATIVr.ContractType =CTr.Type;					VATIVr.ContractPayDeal =CTr.PayDeal;					trhs = false;				end;			end;		  //==		          nwn = OpenWindow("VATIVDClass",1,0,"","",VATIVr);      end;    end else begin      MessageBox(err,"");    end;  end;LVATCorrectionIVsm:;    return;end;globalupdating procedure VATCorrectionIVNewsm()begin  record VIVc VIr;  record VATIVVc VATIVr;  Integer wn,nwn;  Integer normalstate;  Integer err;  boolean trhs;  normalstate = 0;  wn = CurWindow;  if (WindowState(wn)==normalstate) then begin    GetWindowRecord(wn,VIr);    if (VIr.OKFlag==0) then begin      MessageBox(2072,"");      goto LVATCorrectionIVNewsm;    end;    if (VIr.Invalid!=0) then begin      MessageBox(1282,"");      goto LVATCorrectionIVNewsm;    end;    if (err==0) then begin    		//recordnew(VATIVr);		  	CreateVATIVFromVI(VIr,VATIVr);// Edit ************************** Wednesday, 31 July 2013 09:56:45        nwn = OpenWindow("VATIVDClass",1,0,"","",VATIVr);    end else begin      MessageBox(err,"");    end;  end;LVATCorrectionIVNewsm:;    return;end;globalupdating procedure VATCorrectionVIsm()begin  record VIVc VIr;  record VATVIVc VATVIr;  Integer wn,nwn;  Integer err;  wn = CurWindow;  if (WindowState(wn)==Rs_normal) then begin    GetWindowRecord(wn,VIr);    if (VIr.OKFlag==0) then begin      MessageBox(2072,"");      goto LVATCorrectionVIsm;    end;    if (VIr.Invalid!=0) then begin      MessageBox(1282,"");      goto LVATCorrectionVIsm;    end;    if (VIr.APonTR==0) then begin      MessageBox(20938,"");      goto LVATCorrectionVIsm;    end;    err = TestVATVICorrectionAllowed(VIr);    if (err!=0) then begin      MessageBox(err,"");      goto LVATCorrectionVIsm;    end;    err = UpdateTRVATVI(VIr,VATVIr,0);//    if (err==0) or (VATVIr.TransDate<VIr.TransDate) then begin    if (err==0) then begin      if (MatRowCnt(VATVIr)>0) then begin			VATVIr.OperType = VIr.OperType; // SAV Gray-5 2011_01_03        nwn = OpenWindow("VATVIDClass",1,0,"","",VATVIr);      end;    end else begin      MessageBox(err,"");    end;  end;LVATCorrectionVIsm:;    return;end;function Boolean VATIVDClassEFActive(Integer wn)begin  Boolean res;  record VATIVVc VATIVr;    GetWindowRecord(wn,VATIVr);  if (VATIVr.OKFlag==0) then begin    res = true;  end;  VATIVDClassEFActive = res;  return;end;function Boolean VATIVDClassTransDateEFActive(Integer wn,Integer changed)begin  Boolean res;  record VATIVVc VATIVr;  row VATIVVc VATIVrw;  Integer oldrwcnt,rwcnt;  Boolean umf;    GetWindowRecord(wn,VATIVr);  if (VATIVr.OKFlag==0) then begin    res = true;    umf = true;  end else begin    oldrwcnt = WindowOldRowCnt(wn);    rwcnt = MatRowCnt(VATIVr);    if (oldrwcnt<rwcnt) then begin      MatRowGet(VATIVr,oldrwcnt,VATIVrw);      if (VATIVrw.stp==2) then begin umf = true; end;    end;  end;  if (umf==false) then begin    if (changed!=0) then begin MessageBox(1512,""); end;  end else begin    res = true;  end;  VATIVDClassTransDateEFActive = res;  return;end;globalfunction Boolean VATIVDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)BEGIN  Boolean res;  record VATIVVc VATIVr;    switch (fieldname) begin    case "IVNr": res = VATIVDClassEFActive(wn);    case "TransDate": res = VATIVDClassTransDateEFActive(wn,changed);    case "SerNr": res = VATIVDClassEFActive(wn,);    case "VATIVType": res = VATIVDClassEFActive(wn,);    case "Quant": res = VATIVDClassEFActive(wn,);    case "OperType": res = VATIVDClassEFActive(wn,);    case "Sum": res = VATIVDClassEFActive(wn,);    case "Price": res = VATIVDClassEFActive(wn,);    case "VATCode": res = VATIVDClassEFActive(wn,);    case "FrRate": res = VATIVDClassEFActive(wn,);    case "ToRateB1": res = VATIVDClassEFActive(wn,);    case "ToRateB2": res = VATIVDClassEFActive(wn,);    case "CurncyCode": res = VATIVDClassEFActive(wn,);    case "VEPN": res = VATIVDClassEFActive(wn,);	 case "VECorPN": res = VATIVDClassEFActive(wn,);	 case "Reason": res = VATIVDClassEFActive(wn,);	 case "CorReason": res = VATIVDClassEFActive(wn,);	 case "CustCode": res = VATIVDClassEFActive(wn,);	 case "Contract": res = VATIVDClassEFActive(wn,);	 case "ContractDate": res = VATIVDClassEFActive(wn,);	 case "ContractType": res = VATIVDClassEFActive(wn,);	 case "ContractPayDeal": res = VATIVDClassEFActive(wn,);	 case "Spec": res = VATIVDClassEFActive(wn,);	 case "SalesMan": res = VATIVDClassEFActive(wn,);	 case "DebRow": res = true;    otherwise       switch (wnst) begin        case Rs_update:          GetPrevWindowRecord(wn,VATIVr);        otherwise          GetWindowRecord(wn,VATIVr);      end;      if (VATIVr.OKFlag==0) then begin              res = VATIVr.IVNr<=0;      end else begin        res = false;     end;  end;  VATIVDClassActiveEditField = res;  RETURN;END;function Boolean VATVIDClassEFActive(Integer wn)begin  Boolean res;  record VATVIVc VATVIr;    GetWindowRecord(wn,VATVIr);  if (VATVIr.OKFlag==0) then begin    res = true;  end;  VATVIDClassEFActive = res;  return;end;globalfunction Boolean VATVIDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)BEGIN  Boolean res;  record VATVIVc VATVIr;	res = inner.VATVIDClassActiveEditField(wn,fieldname,fn,wnst,rownr,changed);  switch (fieldname) begin	 case "Quant": res = VATVIDClassEFActive(wn,);    case "OperType": res = VATVIDClassEFActive(wn,);    case "Sum": res = VATVIDClassEFActive(wn,);    case "AccNumber": res = VATVIDClassEFActive(wn,);    case "VATCode": res = VATVIDClassEFActive(wn,);    case "FrRate": res = VATVIDClassEFActive(wn,);    case "ToRateB1": res = VATVIDClassEFActive(wn,);    case "ToRateB2": res = VATVIDClassEFActive(wn,);    case "CurncyCode": res = VATVIDClassEFActive(wn,);	 case "VEPN": res = VATVIDClassEFActive(wn,);	 case "VECode": res = VATVIDClassEFActive(wn,);	 case "Price": res = true;// Edit ************************** Tuesday, 24 September 2013 13:43:30	 case "vRebate": res = true;// Edit ************************** Tuesday, 24 September 2013 13:43:30	 case "CredRow":res = true;// Edit ************************** Thursday, 31 October 2013 14:26:05  end;  VATVIDClassActiveEditField = res;  RETURN;END;globalupdating procedure VATCorrectionIPDsm()begin  record IPVc IPr;  record VATIVVc VATIVr;  Integer wn,nwn,rownr,err;  record ContractsVc CTr;  boolean trhs;  wn = CurWindow;  if (WindowState(wn)==Rs_normal) then begin    rownr = WindowActiveRow(wn);    if (rownr>=0) then begin      GetWindowRecord(wn,IPr);      if (IPr.ARonTR==0) then begin        MessageBox(20938,"");        goto LVATCorrectionIPDsm;      end;      if (IPr.OKFlag==0) then begin        MessageBox(2072,"");        goto LVATCorrectionIPDsm;      end;      if (IPr.Invalid!=0) then begin        MessageBox(1282,"");        goto LVATCorrectionIPDsm;      end;      err = CreateVATIVFromIP(IPr,rownr,VATIVr);      switch (err) begin                case 0:			// SAV Gray-5 2011_01_03			trhs = true;			CTr.CustCode = VATIVr.CustCode;			while (loopkey("ActCustCode",CTr,1,trhs)) begin				if CTr.OKFlag==1 and CTr.CustCode == VATIVr.CustCode then begin					VATIVr.Contract = CTr.Code;					VATIVr.ContractDate =CTr.TransDate;					VATIVr.ContractType =CTr.Type;					VATIVr.ContractPayDeal =CTr.PayDeal;					trhs = false;				end;			end;		  //==          nwn = OpenWindow("VATIVDClass",1,0,"","",VATIVr);        otherwise          MessageBox(err,"");      end;    end else begin      MessageBox(22057,"");    end;  end else begin    MessageBox(22902,"");  end;LVATCorrectionIPDsm:;    return;end;globalfunction Boolean PODClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)begin  Boolean res;  record POVc POr;  record POVc PO2r;  record MainStockBlock MSb;  record INVc INr;  row POVc POrw;    res = true;  res = inner.PODClassActiveEditField(wn,fieldname,fn,wnst,rownr,changed);  GetWindowRecord(wn,POr);      switch (fieldname) begin    case "OKDate":		if (POr.Closed<>1) then begin res = true; end;    case "OrderType": res = true;    case "AcceptanceStatus": res = true;    case "Comment": res = true;  end;  PODClassActiveEditField = res;  return;end;//=========global // SAV Gray-5 2011_01_03procedure VATIVSpecSClassArrayOnOpen(var Array string astr,var Integer acnt, string CuCode)begin  record VATIVVc VIr;  Integer i,rwcnt;  boolean trhs;  	trhs = true;	VIr.CustCode = CuCode;	while (loopkey("CustCode",VIr,1,trhs)) begin		if VIr.CustCode==CuCode then begin			if VIr.OKFlag==1 then begin				astr[acnt] = VIr.SerNr & "      " &  VIr.TransDate & "      " &  VIr.VEPN;				acnt = acnt + 1;			end;		end else begin			trhs = false;		end;	end;  return;end;globalfunction Boolean VATIVSpecSClassOnOpenWindow(Integer wn) // SAV Gray-5 2011_01_03begin  Array string 255 astr;  Integer i,acnt;  record VATIVVc VATIVr;  GetWindowRecord(MotherWindow(wn),VATIVr);  VATIVSpecSClassArrayOnOpen(astr,acnt,VATIVr.CustCode);  for (i=0;i<acnt;i=i+1) begin    SetListString(wn,len(astr[i]),astr[i],false);      end;  VATIVSpecSClassOnOpenWindow = false;  return;end;globalfunction Boolean VATIVSpecSClassOnOKWindow(Integer wn) // SAV Gray-5 2011_01_03begin  Integer mwn,i;  string 60 tstr;  boolean trhs;      mwn = MotherWindow(wn);  if (SelectedListLine(wn)>=0) then begin      tstr = GetListString(wn,SelectedListLine(wn));      tstr = left(tstr,10);		trhs = true;		while trhs begin			if (mid(tstr,i,1)<>" ") then begin 				i=i+1;			end else begin				tstr = left(tstr,i);trhs = false;			end;			if (i>len(tstr)) then begin trhs = false; end;		end;        end else begin       tstr="";  end;    CloseWindow(wn);  PasteString(mwn,tstr);  VATIVSpecSClassOnOKWindow = false;  return;end;function Boolean sav_MailDClassAddrCodeEFAfter(Integer wn,Integer changed,Integer rownr)begin  Boolean res,flag;  record MailVc Mailr;  record CUVc CUr;  row MailVc Mailrw;  string 1 char;  string 255 tstr,temp;  integer i;    if (changed!=0) then begin    res = true;    GetWindowRecord(wn,Mailr);	    //MailVc_PasteAddrCode(Mailr,rownr);	MatRowGet(Mailr,rownr,Mailrw);	tstr = Mailrw.AddrCode;	temp=LastInRange(tstr,40);	tstr = left(tstr,len(tstr)-len(temp)-1);	flag = true;	for (i=0;i<len(temp);i=i+1) begin		char = mid(temp,1,i);		if char=="@" then begin flag = false; end;	end;	if flag then begin		CUr.Code = temp;		if (ReadFirstMain(CUr,1,true)) then begin 			if blank(tstr) then begin				Mailrw.AddrCode = CUr.eMail;			end else begin				Mailrw.AddrCode = tstr & "," & CUr.eMail;			end;		end;	end;	//CUr.Code = Mailrw.AddrCode;	//if (ReadFirstMain(CUr,1,true)) then begin end;	//Mailrw.AddrCode = CUr.eMail;	MatRowPut(Mailr,rownr,Mailrw);    PutWindowRecord(wn,Mailr);          end;  sav_MailDClassAddrCodeEFAfter = res;  return;end;globalfunction Boolean MailDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)begin  Boolean res;  record MailVc mailr;  row MailVc mailrr;  LongInt rwcnt,i;  string 255 wnamearg;    res = inner.MailDClassAfterEditField(wn,fieldname,fn,rownr,changed);  switch (fieldname) begin    case "AddrCode": res = sav_MailDClassAddrCodeEFAfter(wn,changed,rownr);  end;out:;  MailDClassAfterEditField = res;  return;end;globalprocedure SwitchToConfS()BEGIN  Integer wn,mwn,wn2;  record ConfVc Confr;    wn = CurWindow;  mwn = MotherWindow(wn);  CloseWindow(wn);        wn2 = OpenWindow("OldConfSClass",0,mwn,"","",Confr);  RETURN;END;global updating procedure CreateMailFromOPDsm()begin  Integer wn,nwn;  record MailVc Mailr;  record OPVc OPr;  row OPVc OPrw;  Integer err;  string 255 tstr,docname,lastcusctode;  Integer i,rwcnt;  wn = CurWindow;  if (WindowState(wn)==0) then begin//normalstate    GetWindowRecord(wn,OPr);      rwcnt = MatRowCnt(OPr);    for (i=0;i<rwcnt;i=i+1) begin      MatRowGet(OPr,0,OPrw);      lastcusctode = OPrw.VECode;    end;    err = CreateMailFromOPD(OPr,Mailr,tstr,lastcusctode,WindowFormName(wn));    if (err!=0) then begin      MessageBox(err,": " & tstr);    end else begin      nwn = OpenWindow("MailDClass",1,0,"","",Mailr);    end;  end; LCreateMailFromOPDsm:;   return;end;global function Boolean ActDClassOKFlagButtonAction(Integer wn,Integer value)begin  Boolean res;  record ActVc Actr;  Integer normalmode,updatemode;		res = true;	res = inner.ActDClassOKFlagButtonAction(wn,value);	getwindowrecord(wn,Actr);		if(nonblank(Actr.MainPersons))then begin		if(usercanaction("EditOtherAct",false))then begin      res = true;    end else begin      if(setinset(currentuser,Actr.MainPersons))then begin        res = true;      end else begin        res = false;      end;    end;	end;	  ActDClassOKFlagButtonAction = res;  return;end;globalfunction Boolean ActDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)BEGIN  Boolean res;  record ActVc Act2r;    res = true;  if (wnst==2) then begin//Rs_update    GetPrevWindowRecord(wn,Act2r);    if (Act2r.OKFlag!=0) then begin      res = false;      switch (fieldname) begin        case "CCPersons": res = true;        case "Contact": res = true;        case "Phone": res = true;        case "PrioLevel": res = true;        case "Comment": res = true;        case "LangCode": res = true;        case "UserStr1": res = true;        case "UserStr2": res = true;        case "UserStr3": res = true;        case "UserStr4": res = true;        case "UserStr5": res = true;        case "UserVal1": res = true;        case "UserVal2": res = true;        case "UserVal3": res = true;        case "UserDate1": res = true;        case "UserDate2": res = true;        case "UserDate3": res = true;      end;    end;  end;  GetWindowRecord(wn,Act2r);  switch (fieldname) begin    case "CUCode": if (nonblank(Act2r.PRCode)) then begin res = false; end;  end;  if (wnst==2) then begin//Rs_update    if(usercanaction("EditOtherAct",false))then begin      res = true;    end else begin      if(setinset(currentuser,Act2r.MainPersons))then begin        res = true;      end else begin        res = false;      end;    end;  end;    ActDClassActiveEditField = res;  RETURN;END;/*globalfunction Boolean ActDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)BEGIN  Boolean res;  record ActVc Actr;  row ActVc Actrw;      res = true;    GetWindowRecord(wn,Actr);        if(usercanaction("EditOtherAct",false))then begin      res = true;    end else begin      if(setinset(currentuser,Actr.MainPersons))then begin            end;    end;  ACTDClassActiveEditField = res;  RETURN;END;*/globalupdating procedure RHistOpenDsm()BEGIN  Integer i;  record RHistVc RHr;  Record CUVc CUr;  Integer wn;  string 50 cnr,filename,sernr;  string 1 c;  wn = CurWindow;  if (ReadMarkedRecord(wn,RHr)) then begin        cnr = UnpackRecordLink(RHr.RecidStr,CUr);            if(readfirstmain(CUr,1,true))then begin      OpenWindow("CUDClass",0,0,"","",CUr);    end;      end;  RETURN;END;globalfunction string 60 VATIVVIRegUkrEClassDefaultFileName(record RcVc RepSpec)begin  string 60 res,tstr;  record CYBlock CYb;  integer i,zerroneed;    blockload(CYb);  	//2655	0025587182	J12	015	05	1	00	0000001	1	10	2013	2655	//2655	0123456789	J12	015	06	1	00	0000001	1	01	2013	2655	res = "2655";//Љод „Џ§ отримувача		tstr = CYb.OrgNr;	if(len(tstr)<10)then begin		zerroneed = 10 - len(tstr);		For(i=0;i<zerroneed;i=i+1) begin	  	tstr = "0" & tstr;		end; 	end;	res = res & tstr;//код платника згґдно з ё„ђЏЋ“ (ђе№страцґйний (облґковий) номер з ’имчасового ре№стру „ЏЂ “кра»ни) або ре№страцґйний номер облґково» картки платника (номер паспорта)			res = res & "J1201506";//код документа		res = res & "1";//ознаку стану документа (значеннЯ елемента C_DOC_STAN)		res = res & "00";//позицґ» з 24 по 25 мґстЯть номер нового звґтного (уточнюючого) документа у звґтному перґодґ (значеннЯ елемента C_DOC_TYPE, доповненого злґва нулем до 2 символґв). „лЯ звґтного документа позицґ» 24Й25 мґститимуть значеннЯ 00;	  res = res & "0000001";    res = res & "1";//тип звґтного перґоду (1-мґсЯць, 2-квартал, 3-пґврґччЯ, 4-девХЯть мґсЯцґв, 5-рґк)   res = res & DateToString(RepSpec.sStartDate,"MM");//‡вґтний мґсЯць  res = res & DateToString(RepSpec.sStartDate,"YYYY");  res = res & "2655";//Љод „Џ§ до Яко» пода№тьсЯ оригґнал  res = res & ".xml";  VATIVVIRegUkrEClassDefaultFileName = res;    return;end;globalprocedure ChangeTSContrPasswdMasterWsm()begin  Integer wn,nwn;  record RcVc RepSpec;  wn = CurWindow;  RepSpec.ObjStr = CurrentUser;  RepSpec.AccStr = "";  RepSpec.FirstAcc = "";  RepSpec.LastAcc = "";  RepSpec.Notation = 0;  RepSpec.ArtMode = 0;  nwn = OpenWindow("ChngeTSContrPasswordClass",0,wn,"","",RepSpec);  return;end;global updatingfunction Boolean ChngeTSContrPasswordClassOnOKWindow(Integer wn)begin record UserVc User; record RcVc RepSpec; boolean res;  getwindowrecord(wn,RepSpec);		res = true;	if(nonblank(RepSpec.ObjStr))then begin  		if(RepSpec.FirstAcc!=RepSpec.LastAcc)then begin	 		messagebox(0,"Џаролґ не спґвпадають"); 			res = false; 		end; 		if(blank(RepSpec.FirstAcc) or blank(RepSpec.LastAcc))then begin 			res = false; 			messagebox(0,"Џароль не може бути порожнґм");		 		end; 		 		if(res)then begin 			USer.Code = currentuser; 			readfirstmain(User,1,true); 			if(CalcPassword(RepSpec.FirstAcc,User.Code,0)==User.NewPassWord)THEN BEGIN				res = false;				messagebox(0,"Џароль не повинен спґвпадати з основним паролем в системґ HansaWorld"); 			end; 		end; 		 		if(res)then begin 			USer.Code = currentuser; 			readfirstmain(User,1,true); 			User.TSControlPassword = RepSpec.FirstAcc; 			recordStore(User,true); 			closewindow(wn); 		end; 	end; 	 	ChngeTSContrPasswordClassOnOKWindow = res;  return;end;globalfunction Boolean TSLClassOnOpenWindow(Integer wn)begin  record UserVc USr;    if(!usercanaction("ViewAllTemeSheets",true))then begin  	setwindowsubset(wn,currentuser);  end;    if(usercanaction("DoNotShowAllSalesGroups",false)==true)then begin  	USr.Code = currentuser;  	readfirstmain(USr,1,true);  	if(nonblank(USr.SalesGroup))then begin      setwindowsubset(wn,USr.SalesGroup);  	end;  end;    TSLClassOnOpenWindow = false;  return;end;globalupdating procedure UpdBalSMS()begin  integer wn;  record SMSConfigBlock SMSb;	  wn = curwindow;  UpdBalSMSRemote(true);  BlockLoad(SMSb);  //ReOpenWindow(wn,"SMSConfigTClass",0,wn,"","",SMSb);  //UpdateNamedWindow("SMSConfigTClass");	deselectwindow(wn,true);  PutWindowRecord(wn,SMSb);  //SetWindowState(wn,Rs_normal)	return;end;global updating procedure OPSendSMStoFDDsm()begin	record OPVc OPr;	integer wn;	record UserVc USr;	string 255 phonetmp,phone,error;		wn = curwindow;	getwindowrecord(wn,OPr);	/*USr.Code = "FD";	readfirstmain(USr,1,true);	if nonblank(USr.Phone1) then begin		phonetmp = USr.Phone1;	end else begin		phonetmp = USr.Phone2;	end;	if nonblank(phonetmp) then begin		phonetmp = StrReplace(phonetmp,"-","");		phonetmp = StrReplace(phonetmp," ","");		phonetmp = StrReplace(phonetmp,"(","");		phonetmp = StrReplace(phonetmp,")","");		phonetmp = StrReplace(phonetmp,"*","");		switch (left(phonetmp,1)) begin			case "+":				phone = phonetmp;			case "3":				phone = "+" & phonetmp;			case "8":				phone = "+3" & phonetmp;			case "0":				phone = "+38" & phonetmp;			otherwise				phone = "+380" & phonetmp;		end;	end;*/		EasySendTurboSMStoUser("FD","Please authorize payment " & OPr.SerNr & " at client bank",error);	if(nonblank(error))then begin		messagebox(0,error);	end;	returnend;global updating procedure OPSendSMStoJMDsm()begin	record OPVc OPr;	integer wn;	record UserVc USr;	string 255 phonetmp,phone,error;		wn = curwindow;	getwindowrecord(wn,OPr);	/*USr.Code = "JM";	readfirstmain(USr,1,true);	if nonblank(USr.Phone1) then begin		phonetmp = USr.Phone1;	end else begin		phonetmp = USr.Phone2;	end;	if nonblank(phonetmp) then begin		phonetmp = StrReplace(phonetmp,"-","");		phonetmp = StrReplace(phonetmp," ","");		phonetmp = StrReplace(phonetmp,"(","");		phonetmp = StrReplace(phonetmp,")","");		phonetmp = StrReplace(phonetmp,"*","");		switch (left(phonetmp,1)) begin			case "+":				phone = phonetmp;			case "3":				phone = "+" & phonetmp;			case "8":				phone = "+3" & phonetmp;			case "0":				phone = "+38" & phonetmp;			otherwise				phone = "+380" & phonetmp;		end;	end;*/		EasySendTurboSMStoUser("JM","Please authorize payment " & OPr.SerNr & " at client bank",error);	if(nonblank(error))then begin		messagebox(0,error);	end;	returnend;global // Edit ************************** BPI Ukraine - KramarAlexandr - Monday, 1 October 2018 15:21:07function Boolean DocumentsFlagSCLassOnOKWindow(Integer wn)begin  PasteFromSysList(wn,-2);  DocumentsFlagSCLassOnOKWindow = false;  return;end; // Edit ************************** BPI Ukraine - KramarAlexandr - Monday, 1 October 2018 15:21:04global // Edit ************************** BPI Ukraine - KramarAlexandr - Monday, 1 October 2018 15:21:02function Boolean DocumentsFlagSCLassOnOpenWindow(Integer wn)begin  Array string 255 astr;  Integer i,acnt,mwn;  record RcVc RepSpec;    SetListString(wn,len("’ак"),"’ак",false);      SetListString(wn,len("Ќґ"),"Ќґ",false);      DocumentsFlagSCLassOnOpenWindow = false;  return;end; // Edit ************************** BPI Ukraine - KramarAlexandr - Monday, 1 October 2018 15:21:00globalfunction Boolean IVDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)BEGIN  Boolean res,umf;  record FEVIVc FEVI2r;  record FEVIVc FEVIr;  row FEVIVc FEVIrw;  Integer normalmode,updatemode;  Integer rwcnt,orwcnt;  record APVc APr;       res = true;    res = inner.IVDClassActiveEditField(wn,fieldname,fn,wnst,rownr,changed);    if(fieldname=="DocumentsFlag")then begin  	res = true;  end;    IVDClassActiveEditField = res;  RETURN;END;globalprocedure ProListRClassReportDefaults(Integer wn)BEGIN  record RcVc RepSpec;  string 255 tstr;  date bd;    DeselectWindow(wn,false);  GetWindowRecord(wn,RepSpec);  ReportDefaults(RepSpec,"ProListRClass");    RepSpec.ArtMode = 1;  RepSpec.flags[10] = 1;  RepSpec.flags[11] = 1;  RepSpec.flags[12] = 1;  RepSpec.flags[19] = 1;  RepSpec.flags[20] = 0;  RepSpec.sStartDate = bd;  RepSpec.sEndDate = bd;  PutWindowRecord(wn,RepSpec);  SelectWindow(wn);  RETURN;END;function Boolean OPDClassBankAccEFAfter(integer wn, integer rownr, Integer changed, Integer fn)begin	boolean res;	record OPVc OPr;	row OPVc OPrw;	integer acnt;	array string 100 astr;	integer i;	boolean found;			getwindowrecord(wn,OPr);	matrowget(OPr,rownr,OPrw);		VEBankAccSClassArrayOnOpen(OPrw.VECode,astr,acnt);	for(i=0;i<acnt;i=i+1)begin		if(astr[i]==OPrw.BankAcc)then begin			found = true;		end;	end;		if(found==false)then begin		OPrw.BankAcc = "";		matrowput(OPr,rownr,OPrw);		putwindowrecord(wn,OPr);	end;	res = true;	OPDClassBankAccEFAfter = res;return;end;globalfunction Boolean OPDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)BEGIN  Boolean res;		res = inner.OPDClassAfterEditField(wn,fieldname,fn,rownr,changed);	  switch (fieldname) begin    case "BankAcc": res = OPDClassBankAccEFAfter(wn,rownr,changed,fn);  end;  OPDClassAfterEditField = res;  RETURN;END;global function Boolean CityTypeSClassOnOpenWindow(Integer wn)BEGIN  LongInt i,mwn;  string 255 tstr;    tstr = "----- ћридична особа ------";	SetListString(wn,len(tstr),tstr,false); 			tstr = "USRC      ‚водитьсЯ код ё„ђЏЋ“.";	SetListString(wn,len(tstr),tstr,false); 	tstr = "TRAN      ‡азнача№тьсЯ ре№страцґйний (облґковий) номер платника податку";	SetListString(wn,len(tstr),tstr,false); 	tstr = "NA      §дентифґкацґйний код юридичнґй особґ не присво№ний";	SetListString(wn,len(tstr),tstr,false); 		tstr = "----- ”ґзична особа ------";	SetListString(wn,len(tstr),tstr,false); 	tstr = "RNRCT      ђе№страцґйний номер облґково» картки платника податкґв (ґдентифґкацґйний код фґзично» особи).";	SetListString(wn,len(tstr),tstr,false); 	tstr = "PSPT      ‘ерґЯ (за наЯвностґ) та номер паспорту";	SetListString(wn,len(tstr),tstr,false); 	tstr = "OT      §нше: ‘ерґЯ (за наЯвностґ) та номер ґншого документа";	SetListString(wn,len(tstr),tstr,false); 	tstr = "UNKN      Џлатник не ма№ ґнформацґ» про ґдентифґкацґю отримувача";	SetListString(wn,len(tstr),tstr,false); 		   CityTypeSClassOnOpenWindow = false;  RETURN;END; globalfunction Boolean CityTypeSClassOnOKWindow(Integer wn)begin  PasteFromSysList(wn,-2);  CityTypeSClassOnOKWindow = false;  return;end;